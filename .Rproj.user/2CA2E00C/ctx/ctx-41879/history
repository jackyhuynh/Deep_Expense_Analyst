shiny::runApp('index')
runApp()
runApp()
runApp('index')
devtools::install_github("paulc91/shinyauthr")
runApp('index')
devtools::install_github("paulc91/shinyauthr")
devtools::install_github("paulc91/shinyauthr")
devtools::install_github("paulc91/shinyauthr")
devtools::install_github("paulc91/shinyauthr")
install.packages(c("boot", "broom", "coin", "cvms", "data.table", "desc", "dplyr", "farver", "gert", "ggsignif", "gmm", "Hmisc", "ipred", "isoband", "libcoin", "lubridate", "MASS", "Matrix", "MatrixModels", "mgcv", "mime", "nlme", "party", "partykit", "pillar", "pkgload", "promises", "ps", "quantreg", "RcppArmadillo", "rgl", "rio", "rmarkdown", "rstatix", "segmented", "SparseM", "standardize", "testthat", "tibble", "tidyr", "tinytex", "usethis", "waldo", "xfun"))
devtools::install_github("paulc91/shinyauthr")
install.packages("cachem")
devtools::install_github("paulc91/shinyauthr")
shiny::runApp('index')
runApp('index')
getwd()
runApp('index')
runApp('index')
runApp('index')
runApp('index')
getwd()
runApp('index')
runApp('index')
runApp('index')
getwd()
runApp('index')
runApp('index')
View(login_ui)
View(validate_pwd)
View(login_ui)
View(validate_pwd)
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
runApp('index')
runApp('index')
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
library(readr)
Chase2107_Activity_20210306 <- read_csv("data/Chase2107_Activity_20210306.CSV",
col_types = cols(Details = col_factor(levels = c("DEBIT",
"CREDIT", "DSLIP")), `Posting Date` = col_date(format = "%m/%d/%Y")))
View(Chase2107_Activity_20210306)
# Import Data
UserData <-
read_csv(
"data/Chase2107_Activity_20210306.CSV",+col_types = cols(
Details = col_factor(levels = c("DEBIT",+"CREDIT", "DSLIP")),
`Posting Date` = col_date(format = "%m/%d/%Y")
)
)
UserData <-
read_csv(
"data/Chase2107_Activity_20210306.CSV",+col_types = cols(
Details = col_factor(levels = c("DEBIT",+"CREDIT", "DSLIP")),
`Posting Date` = col_date(format = "%m/%d/%Y")
)
)
UserData <-
read_csv(
"data/Chase2107_Activity_20210306.CSV",+col_types = cols(
Details = col_factor(levels = c("DEBIT",+"CREDIT", "DSLIP")),
`Posting Date` = col_date(format = "%m/%d/%Y")
)
)
# Import Data
UserData <- read_csv("data/Chase2107_Activity_20210306.CSV", col_types = cols(Details = col_factor(levels = c("DEBIT",
"CREDIT", "DSLIP")), `Posting Date` = col_date(format = "%m/%d/%Y")))
library(shiny)
library(dplyr)
library(DT)
library(ggplot2)
library(shinydashboard)
library(plotly)
library(readr)
# Import Data
UserData <- read_csv("data/Chase2107_Activity_20210306.CSV", col_types = cols(Details = col_factor(levels = c("DEBIT",
"CREDIT", "DSLIP")), `Posting Date` = col_date(format = "%m/%d/%Y")))
runApp('MyMultiApp')
shiny::runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
?mainPanel
runApp('MyMultiApp')
View(UserData)
str(UserData)
runApp('MyMultiApp')
library(shinythemes)
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
str(UserData)
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
UserData <- read_csv("data/Chase2107_Activity_20210306.CSV",
col_types = cols(Details = col_factor(levels =
c("DEBIT","CREDIT", "DSLIP")), `Posting Date` = col_date(format = "%m/%d/%Y")))
rm(UserData$Type)
UserData$Type<-NULL
View(UserData)
# Import Data
UserData <- read_csv("data/Chase2107_Activity_20210306.CSV"
, `Posting Date` = col_date(format = "%m/%d/%Y")))
# Import Data
UserData <- read_csv("data/Chase2107_Activity_20210306.CSV"
, `Posting Date` = col_date(format = "%m/%d/%Y"))
# Import Data
UserData <- read_csv("data/Chase2107_Activity_20210306.CSV"
, `Posting Date` = col_date(format = "%m/%d/%Y"))
library(readr)
Chase2107_Activity_20210306 <- read_csv("MyMultiApp/data/Chase2107_Activity_20210306.CSV",
col_types = cols(`Posting Date` = col_date(format = "%m/%d/%Y")))
View(Chase2107_Activity_20210306)
# Import Data
UserData <- read_csv("MyMultiApp/data/Chase2107_Activity_20210306.CSV",
col_types = cols(`Posting Date` = col_date(format = "%m/%d/%Y")))
UserData$Type<-NULL
UserData <- c("type","date","description","amount","balance")
# Import Data
UserData <- read_csv("MyMultiApp/data/Chase2107_Activity_20210306.CSV",
col_types = cols(`Posting Date` = col_date(format = "%m/%d/%Y")))
UserData$Type<-NULL
UserData <- rename(UserData,c("type","date","description","amount","balance"))
str(UserData)
UserData <- UserData %>% rename(c(Details=type,`Posting Date`=date,Description=description,Amount=amount,Balance=balance))
UserData <- UserData %>% rename(c(type=Details,date=`Posting Date`,description=Description,amount=Amount,balance=Balance))
View(UserData)
runApp('MyMultiApp')
getwd()
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
# Import Data
UserData <- read_csv("C:/Users/Valued Customer/Documents/source/R-MyFirstShinyWebApp/MyMultiApp/data/Chase2107_Activity_20210306.CSV",
col_types = cols(`Posting Date` = col_date(format = "%m/%d/%Y")))
UserData$Type<-NULL
UserData$Description<-NULL
UserData <- UserData %>% rename(c(type=Details,date=`Posting Date`,amount=Amount,balance=Balance))
View(UserData)
UserData <- aggregate(UserData[], by=UserData["date"], sum)
View(UserData)
UserData[type==DEBIT]
UserData[type=='DEBIT']
UserData[UserData$type=='DEBIT']
UserDebit <- UserData %>% UserData$type =='DEBIT'
UserDebit <- UserData[UserData$type =='DEBIT',]
View(UserDebit)
UserCredit <- UserData[UserData$type =='CREDIT',]
str(UserData$type)
sumary(UserData$type)
summary(UserData$type)
summary(UserData)
str(UserData)
categories <- unique(UserData$type)
numberOfCategories <- length(categories)
ui <- (fluidPage(
theme = shinytheme("lumen"),
titlePanel("Expense Analyst"),
sidebarLayout(
sidebarPanel(
# Select type of trend to plot
selectInput(
inputId = "type",
label = strong("Trend index"),
choices = unique(UserData$type),
selected = "DEBIT"
),
# Select date range to be plotted
dateRangeInput(
"date",
strong("Date range"),
start = "2019-03-06",
end = "2021-03-05",
min = "2019-03-06",
max = "2021-03-05"
),
# Select whether to overlay smooth trend line
checkboxInput(
inputId = "smoother",
label = strong("Overlay smooth trend line"),
value = FALSE
),
# Display only if the smoother is checked
conditionalPanel(
condition = "input.smoother == true",
sliderInput(
inputId = "f",
label = "Smoother span:",
min = 0.01,
max = 1,
value = 0.67,
step = 0.01,
animate = animationOptions(interval = 100)
),
HTML("Higher values give more smoothness.")
)
),
# Output: Description, lineplot, and reference
mainPanel(
plotOutput(outputId = "lineplot", height = "300px"),
textOutput(outputId = "desc"),
tags$a(href = "https://github.com/jackyhuynh", "Source: Private Data from Truc", target = "_blank")
)
)
)#end fluid Page
) #end ui
categories
runApp('MyMultiApp')
categories
UserDSLIP <- UserData[UserData$type =='CHECK',] %>% select(UserDSLIP, -Type)
select(UserDSLIP, -type)
UserDSLIP <- UserData[UserData$type =='CHECK',]
select(UserDSLIP, -type)
select(UserDSLIP, -type)<- UserData[UserData$type =='CHECK',]
UserDSLIP %>% select(-type)<- UserData[UserData$type =='CHECK',]
UserDSLIP %>% select(-type) %>% UserData[UserData$type =='CHECK',]
UserDSLIP %>% UserData[UserData$type =='CHECK',]%>% select(-type)
UserDSLIP <- select(UserData[UserData$type =='CHECK',],-type)
# Tidy the data and summary it
UserDebit <- aggregate(select(UserData[UserData$type =='DEBIT',],-type)['amount'],by=select(UserData[UserData$type =='DEBIT',],-type)['date'],sum)
View(UserDebit)
categories
View(UserData)
Total<-aggregate(select(UserData,-c(type,balance))['amount'],select(UserData,-c(type,balance))['date'],sum)
View(Total)
runApp('MyMultiApp')
runApp('MyMultiApp')
# Tidy the data and summary it
UserDebit <- aggregate(select(UserData[UserData$type =='DEBIT',],-type)['amount'],by=select(UserData[UserData$type =='DEBIT',],-type)['date'],sum)
UserCredit <- aggregate(select(UserData[UserData$type =='CREDIT',],-type)['amount'],by=select(UserData[UserData$type =='CREDIT',],-type)['date'],sum)
UserCheck <- aggregate(select(UserData[UserData$type =='CHECK',],-type)['amount'],by=select(UserData[UserData$type =='CHECK',],-type)['date'],sum)
UserDSLIP <- aggregate(select(UserData[UserData$type =='DSLIP',],-type)['amount'],by=select(UserData[UserData$type =='DSLIP',],-type)['date'],sum)
Total<-aggregate(select(UserData,-c(type,balance))['amount'],select(UserData,-c(type,balance))['date'],sum)
runApp('MyMultiApp')
View(UserCredit)
View(UserCredit)
runApp('MyMultiApp')
plot(x = UserDebit$date, y = UserDebit$amount, type = "l",
xlab = "Date", ylab = "Balance", col = color, fg = color, col.lab = color, col.axis = color)
color = "#434343"
plot(x = UserDebit$date, y = UserDebit$amount, type = "l",
xlab = "Date", ylab = "Balance", col = color, fg = color, col.lab = color, col.axis = color)
View(Total)
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
View(Total)
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
plot(x = Total$date, y = Total$amount, type = "l",
xlab = "Date", ylab = "Balance", col = color, fg = color, col.lab = color, col.axis = color)
runApp('MyMultiApp')
Total<-aggregate(select(UserData,-c(type,balance))['amount'],select(UserData,-c(type,balance))['date'],last
View(Total)
View(Total)
Total<-aggregate(select(UserData,-c(type,balance))['balance'],select(UserData,-c(type,balance))['date'],last
View(Total)
View(Total)
Total<-aggregate(select(UserData,-c(type,balance))['balance'],select(UserData,-c(type,balance))['date'],last)
Total<-aggregate(select(UserData,-c(type,balance))['balance'],select(UserData,-c(type,balance))['date'],last)
View(UserData)
Total<-aggregate(select(UserData,-c(type))['balance'],select(UserData,-c(type))['date'],last)
View(Total)
plot(x = Total$date, y = Total$balance, type = "l",
xlab = "Date", ylab = "Balance", col = color, fg = color, col.lab = color, col.axis = color)
smooth_curve <- lowess(x = as.numeric(Total$date), y = Total$balance)
color = "#434343"
plot(x = Total$date, y = Total$balance, type = "l",
xlab = "Date", ylab = "Balance", col = color, fg = color, col.lab = color, col.axis = color)
smooth_curve <- lowess(x = as.numeric(Total$date), y = Total$balance)
lines(smooth_curve, col = "#E6553A", lwd = 3)
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp()
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp('MyMultiApp')
UserData <-
read_csv(
"C:/Users/Valued Customer/Documents/source/R-MyFirstShinyWebApp/MyMultiApp/data/Chase2107_Activity_20210306.CSV",
col_types = cols(`Posting Date` = col_date(format = "%m/%d/%Y"))
)
UserData$Type <- NULL
UserData$Description <- NULL
UserData <-
UserData %>% rename(c(
type = Details,
date = `Posting Date`,
amount = Amount,
balance = Balance
))
View(UserData)
x    <- Total[Amount]
UserData <-
UserData %>% rename(c(
type = Details,
date = `Posting Date`,
amount = Amount,
balance = Balance
))
Total <-
aggregate(select(UserData, -c(type))['balance'], select(UserData, -c(type))['date'], last)
x    <- Total[Amount]
x    <- Total[amount]
x    <- Total[Total$amount]
View(x)
View(x)
View(x)
View(x)
x
runApp()
runApp()
runApp('MyMultiApp')
runApp('MyMultiApp')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(x)
rm(x)
Total %>% filter(date > as.POSIXct(input$date1[1]) &
date < as.POSIXct(input$date1[2]))
min = "2019-03-06"
max = "2021-03-05"
Total %>% filter(date > as.POSIXct(min) &
date < as.POSIXct(max))
min = "2020-03-06"
max = "2021-03-05"
Total1<-Total %>% filter(date > as.POSIXct(min) &
date < as.POSIXct(max))
View(Total1)
Total1<-Total %>% filter(date > (min) &
date < (max))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
UserDSLIP <- aggregate(select(UserData[UserData$type == 'DSLIP', ], -type)['amount'], by =
select(UserData[UserData$type == 'DSLIP', ], -type)['date'], sum)%>%
filter(date > (min) & date < (max)
UserDSLIP <- aggregate(select(UserData[UserData$type == 'DSLIP', ], -type)['amount'], by =
select(UserData[UserData$type == 'DSLIP', ], -type)['date'], sum)%>%
filter(date > (min) & date < (max))
UserDSLIP <- aggregate(select(UserData[UserData$type == 'DSLIP', ], -type)['amount'], by =
select(UserData[UserData$type == 'DSLIP', ], -type)['date'], sum)
UserDSLIP %>%
filter(date > (min) & date < (max))
UserDSLIP <-filter(date > (min) & date < (max))%>% aggregate(select(UserData[UserData$type == 'DSLIP', ], -type)['amount'], by =
select(UserData[UserData$type == 'DSLIP', ], -type)['date'], sum)
UserDSLIP <- UserDSLIP %>% filter(date > (min) & date < (max))
View(UserData)
View(UserDSLIP)
View(UserDSLIP)
View(UserData)
runApp()
UserDataOrg <-
read_csv(
"C:/Users/Valued Customer/Documents/source/R-MyFirstShinyWebApp/MyMultiApp/data/Chase2107_Activity_20210306.CSV",
col_types = cols(`Posting Date` = col_date(format = "%m/%d/%Y"))
)
UserDataOrg$Type <- NULL
View(UserDataOrg)
UserDataOrg <-UserDataOrg %>% rename(c(type = Details,date = `Posting Date`,
amount = Amount, balance = Balance, description=Description ))
UserData <-UserDataOrg
UserData$description <- NULL
runApp()
install.packages('rsconnect')
