SumTransaction <- SumTransaction[order(-SumTransaction[,2]),]
rm(OtherTransaction,UserTransaction)
View(SumTransaction)
# Calculate the percentage of all Transactions smaller than 1 percent
OtherTransaction <- data.frame("Other Expenses",
sum(UserTransaction$Amount) - sum(SumTransaction$Amount))
# Summary by debit and type
UserTransaction <-
aggregate(select(transactions[transactions$type == 'debit', ], -type)['Amount'], by =
select(transactions[transactions$type == 'debit', ], -type)['category'], sum)
# Filter the big transaction
SumTransaction <- filter(UserTransaction, as.numeric(UserTransaction$Amount/sum(UserTransaction$Amount)) > 0.01)
# Calculate the percentage of all Transactions smaller than 1 percent
OtherTransaction <- data.frame("Other Expenses",
sum(UserTransaction$Amount) - sum(SumTransaction$Amount))
View(OtherTransaction)
# Rename the value
names(OtherTransaction) <- c('category','Amount')
# Get the total transaction
SumTransaction<- rbind(SumTransaction,OtherTransaction)
View(SumTransaction)
# using your data without "ymax" and "ymin"
browsers <- structure(list(browser = structure(c(3L, 3L, 3L, 3L, 2L, 2L,
2L, 1L, 5L, 5L, 4L), .Label = c("Chrome", "Firefox", "MSIE",
"Opera", "Safari"), class = "factor"), version = structure(c(5L,
6L, 7L, 8L, 2L, 3L, 4L, 1L, 10L, 11L, 9L), .Label = c("Chrome 10.0",
"Firefox 3.5", "Firefox 3.6", "Firefox 4.0", "MSIE 6.0", "MSIE 7.0",
"MSIE 8.0", "MSIE 9.0", "Opera 11.x", "Safari 4.0", "Safari 5.0"
# using your data without "ymax" and "ymin"
browsers <- structure(list(browser = structure(c(3L, 3L, 3L, 3L, 2L, 2L,
2L, 1L, 5L, 5L, 4L), .Label = c("Chrome", "Firefox", "MSIE",
"Opera", "Safari"), class = "factor"), version = structure(c(5L,
6L, 7L, 8L, 2L, 3L, 4L, 1L, 10L, 11L, 9L), .Label = c("Chrome 10.0",
"Firefox 3.5", "Firefox 3.6", "Firefox 4.0", "MSIE 6.0", "MSIE 7.0",
"MSIE 8.0", "MSIE 9.0", "Opera 11.x", "Safari 4.0", "Safari 5.0"
), class = "factor"), share = c(10.85, 7.35, 33.06, 2.81, 1.58,
13.12, 5.43, 9.91, 1.42, 4.55, 1.65)), .Names = c("parent", "node", "size")
, row.names = c(NA, -11L), class = "data.frame")
# using your data without "ymax" and "ymin"
browsers <-
structure(
list(
browser = structure(
c(3L, 3L, 3L, 3L, 2L, 2L,
2L, 1L, 5L, 5L, 4L),
.Label = c("Chrome", "Firefox", "MSIE",
"Opera", "Safari"),
class = "factor"
),
version = structure(
c(5L,
6L, 7L, 8L, 2L, 3L, 4L, 1L, 10L, 11L, 9L),
.Label = c(
"Chrome 10.0",
"Firefox 3.5",
"Firefox 3.6",
"Firefox 4.0",
"MSIE 6.0",
"MSIE 7.0",
"MSIE 8.0",
"MSIE 9.0",
"Opera 11.x",
"Safari 4.0",
"Safari 5.0"
),
class = "factor"
),
share = c(10.85, 7.35, 33.06, 2.81, 1.58,
13.12, 5.43, 9.91, 1.42, 4.55, 1.65)
),
.Names = c("parent", "node", "size")
,
row.names = c(NA,-11L),
class = "data.frame"
)
# add column browser to be used for colouring
browsers$browser <- browsers$parent
# write data.frame into csv file
write.table(browsers,
file = 'browsers.csv',
row.names = F,
sep = ",")
# install ggsunburst
if (!require("ggplot2"))
install.packages("ggplot2")
if (!require("rPython"))
install.packages("rPython")
install.packages(
"http://genome.crg.es/~didac/ggsunburst/ggsunburst_0.0.9.tar.gz",
repos = NULL,
type = "source"
)
library(ggsunburst)
# generate data structure
sb <-
sunburst_data(
'browsers.csv',
type = 'node_parent',
sep = ",",
node_attributes = c("browser", "size")
)
View(SumTransaction)
# import the data
transactions <- read_csv("transactions.csv")
transactions$Category <- as.factor(transactions$category)
# change the category to factor
transactions$Category <- as.factor(transactions$category)
# import the data
transactions <- read_csv("transactions.csv") %>% as.factor(transactions$category)
# import the data
transactions <- read_csv("transactions.csv") %>% as.factor(category)
# import the data
transactions <- read_csv("transactions.csv") %>% as.factor(Category)
# import the data
transactions <- read_csv("transactions.csv") %>% as.factor($Category)
# import the data
transactions <- read_csv("transactions.csv")
View(transactions)
# change the category to factor
transactions$category <- as.factor(transactions$category)
# Summary by debit and type
UserTransaction <-
aggregate(select(transactions[transactions$type == 'debit', ], -type)['Amount'], by =
select(transactions[transactions$type == 'debit', ], -type)['category'], sum)
# Filter the big transaction
SumTransaction <- filter(UserTransaction, as.numeric(UserTransaction$Amount/sum(UserTransaction$Amount)) > 0.01)
# Calculate the percentage of all Transactions smaller than 1 percent
OtherTransaction <- data.frame("Other Expenses",
sum(UserTransaction$Amount) - sum(SumTransaction$Amount))
# Rename the value
names(OtherTransaction) <- c('category','Amount')
# Get the total transaction
SumTransaction<- rbind(SumTransaction,OtherTransaction)
SumTransaction <- SumTransaction[order(-SumTransaction[,2]),]
View(SumTransaction)
# Filter the big transaction
SumTransaction <- filter(UserTransaction, as.numeric(UserTransaction$Amount/sum(UserTransaction$Amount)) > 0.005)
# Calculate the percentage of all Transactions smaller than 1 percent
OtherTransaction <- data.frame("Other Expenses",
sum(UserTransaction$Amount) - sum(SumTransaction$Amount))
View(OtherTransaction)
# Rename the value
names(OtherTransaction) <- c('category','Amount')
# Get the total transaction after summary the transaction less than 1 percent
SumTransaction<- rbind(SumTransaction,OtherTransaction)
View(SumTransaction)
# Sort the SumTransaction
SumTransaction <- SumTransaction[order(-SumTransaction[,2]),]
piepercent <- percent(as.numeric(SumTransaction$Amount/sum(SumTransaction$Amount)))
piepercent <- (as.numeric(SumTransaction$Amount/sum(SumTransaction$Amount)))
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(piepercent, -7), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7
)
legend(
x = 1.2, # DELIBERATE POSITION
y = 0.5, # DELIBERATE POSITION
inset = .05,
title = "Primary Crime Type",
legend = names(SumTransaction), # YOU WERE PASSING IN _ALL_ THE REPEAT NAMES
fill = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction)),  # USE THE SAME COLOR PALETTE
horiz = FALSE,
cex = 0.6, # PROPER PARAMETER FOR TEXT SIZE
text.width = 0.7 # SET THE BOX WIDTH
)
pie(
SumTransaction,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(piepercent, -7), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7
)
legend(
x = 1.2, # DELIBERATE POSITION
y = 0.5, # DELIBERATE POSITION
inset = .05,
title = "Primary Crime Type",
legend = names(SumTransaction), # YOU WERE PASSING IN _ALL_ THE REPEAT NAMES
fill = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # USE THE SAME COLOR PALETTE
horiz = FALSE,
cex = 0.6, # PROPER PARAMETER FOR TEXT SIZE
text.width = 0.7 # SET THE BOX WIDTH
)
legend(
x = 1.2, # DELIBERATE POSITION
y = 0.5, # DELIBERATE POSITION
inset = .05,
title = "Primary Crime Type",
legend = names(SumTransaction$category), # YOU WERE PASSING IN _ALL_ THE REPEAT NAMES
fill = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # USE THE SAME COLOR PALETTE
horiz = FALSE,
cex = 0.6, # PROPER PARAMETER FOR TEXT SIZE
text.width = 0.7 # SET THE BOX WIDTH
)
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(piepercent, -7), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7
)
legend(
x = 1.2, # DELIBERATE POSITION
y = 0.5, # DELIBERATE POSITION
inset = .05,
title = "Primary Crime Type",
legend = names(SumTransaction$category), # YOU WERE PASSING IN _ALL_ THE REPEAT NAMES
fill = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # USE THE SAME COLOR PALETTE
horiz = FALSE,
cex = 0.6, # PROPER PARAMETER FOR TEXT SIZE
text.width = 0.7 # SET THE BOX WIDTH
)
# import the data
transactions <- read_csv("transactions.csv")
# Summary by debit and type
UserTransaction <-
aggregate(select(transactions[transactions$type == 'debit', ], -type)['Amount'], by =
select(transactions[transactions$type == 'debit', ], -type)['category'], sum)
# Filter the big transaction
SumTransaction <- filter(UserTransaction, as.numeric(UserTransaction$Amount/sum(UserTransaction$Amount)) > 0.005)
# Calculate the percentage of all Transactions smaller than 1 percent
OtherTransaction <- data.frame("Other Expenses",
sum(UserTransaction$Amount) - sum(SumTransaction$Amount))
# Rename the value
names(OtherTransaction) <- c('category','Amount')
# Get the total transaction after summary the transaction less than 1 percent
SumTransaction<- rbind(SumTransaction,OtherTransaction)
# Sort the SumTransaction
SumTransaction <- SumTransaction[order(-SumTransaction[,2]),]
piepercent <- (as.numeric(SumTransaction$Amount/sum(SumTransaction$Amount)))
par(mar = c(1, 1, 1, 1)) # bltr
pie(
SumTransaction,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(piepercent, -7), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7
)
pie(
SumTransaction$Amount,
labels = SumTransaction$category,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(piepercent, -7), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7
)
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(SumTransaction$category, -7), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7
)
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(SumTransaction$category, -1), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7
)
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(SumTransaction$category, -2), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7
)
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(piepercent$category, -2), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7
)
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(piepercent$category, -2), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7
)
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(piepercent, -2), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7
)
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(piepercent, -4), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7
)
piepercent <- scales::percent(as.numeric(SumTransaction$Amount/sum(SumTransaction$Amount)))
par(mar = c(1, 1, 1, 1)) # bltr
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(piepercent, -4), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7
)
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(piepercent, -4), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7,
border="white",
)
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(piepercent, -4), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7,
border="white",
)
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(piepercent, -4), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7,
border="white",
)
legend(-1, 1.9, SumTransaction$category ,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),
text.col = "green4", lty = c(2, -1, 1), pch = c(NA, 3, 4),
merge = TRUE, bg = "gray90")
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(piepercent, -4), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7,
border="white",
)
legend( SumTransaction$category ,
fill = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),
)
legend(.9, .1, SumTransaction$category, cex = 0.7,
fill = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),)
runApp()
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(piepercent, -4), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7,
border="white",
)
legend(.9, .5, SumTransaction$category, cex = 0.7,
fill = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),)
legend(1, .5, SumTransaction$category, cex = 0.7,
fill = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),)
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = tail(piepercent, -4), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7,
border="white",
)
legend(1, .5, SumTransaction$category, cex = 0.7,
fill = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),)
piepercent <- scales::percent(as.numeric(SumTransaction$Amount/sum(SumTransaction$Amount)))
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = head(piepercent, -4), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7,
border="white",
)
legend(1, .5, SumTransaction$category, cex = 0.7,
fill = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),)
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = head(piepercent, 10), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7,
border="white",
)
pie(
SumTransaction$Amount,
edges = 200,
radius = 0.8,
clockwise = TRUE, # IMPORTANT
angle = 45,
col = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),  # BETTER COLOR PALETTE
labels = head(piepercent, -3), # NEVER DISPLAY OVERLAPPING LABELS
cex = 0.7,
border="white",
)
legend(1, .5, SumTransaction$category, cex = 0.7,
fill = viridis::viridis_pal(option = "magma", direction=-1)(length(SumTransaction$Amount)),)
runApp()
runApp()
shiny::runApp()
runApp('ExpenseVer1')
getwd()
#' Run shinyauthr example
runApp('~/source/R/shinyauthr/inst/shiny-examples/shinyauthr_example')
#' @param pass_title label for the password text input
#' @param login_title label for the login button
#' @param error_message message to display after failed login
#' @param additional_ui additional shiny UI element to add below login button. Wrap multiple inside \code{shiny::tagList()}
#'
#' @return Shiny UI
#'
#' @author Paul Campbell, \email{pacampbell91@gmail.com}
#'
#' @export
loginUI <- function(id, title = "Please log in", user_title = "User Name", pass_title = "Password",
login_title = "Log in", error_message = "Invalid username or password!", additional_ui = NULL) {
ns <- shiny::NS(id)
shiny::div(id = ns("panel"), style = "width: 500px; max-width: 100%; margin: 0 auto; padding: 20px;",
shiny::wellPanel(
shiny::tags$h2(title, class = "text-center", style = "padding-top: 0;"),
shiny::textInput(ns("user_name"), shiny::tagList(shiny::icon("user"), user_title)),
shiny::passwordInput(ns("password"), shiny::tagList(shiny::icon("unlock-alt"), pass_title)),
shiny::div(
style = "text-align: center;",
shiny::actionButton(ns("button"), login_title, class = "btn-primary", style = "color: white;")
),
additional_ui,
shinyjs::hidden(
shiny::div(id = ns("error"),
shiny::tags$p(error_message,
style = "color: red; font-weight: bold; padding-top: 5px;", class = "text-center"))
)
)
)
}
#' Run shinyauthr example
#'
#' Launch example shiny dashboard using shinyauthr authentication modules
plyr:arrange()
dplyr:arrange()
dplyr::arrange()
dplyr::arrange
shiny::runApp()
